%% Computes the illustrations used in the paper
%  Several custom illustrations in the paper are generated by this script
%  Run illustrations from the root directory of the project to generate
%  these yourself.

function [] = illustrations()

    %% Load necessary data
    I_spiral = double(imread('data/spiral_512x512.png')) / 255;
    I_claudia = double(imread('data/claudia_512x512.png')) / 255;
    I_tom = double(imread('data/tom_512x512.png')) / 255;
    M = double(imread('mask/text_mask/text_mask1.png')) / 255;

    %% Figure 2: Showing the diffusion artifacts
    function [] = plotStepByStep(I, mask, steps, iterations, K)
        figure;
        hold on;
        cd('diffusion_diamond');
        I_rec = I;
        for step = 1:steps
            subplot(1, steps, step);
            imshow(I_rec(296:316, 1:20));
            for t = 1:iterations
                [~, I_rec] = diffuse(I_rec, mask, I, K);
            end
        end
        hold off;
        cd('../');
    end

    % Construct kernels
    K_diamond = [0    0.25 0;
                 0.25 0    0.25;
                 0    0.25 0];
    K_100 = eye(3) * 8 + ones(3);
    K_100(2,2) = 0;
    K_100 = imrotate(K_100, 100 + 45, 'bicubic', 'crop');
    K_100 = K_100 / sum(sum(K_100));

    % Plot step-by-step diffusion procedure using K_diamond kernel
    I_spiral_rec = I_spiral .* M;
    plotStepByStep(I_spiral_rec, M, 3, 20, K_diamond);
    
    % Plot step-by-step diffusion procedure using K_100 kernel (100
    % degrees)
    I_spiral_rec = I_spiral .* M;
    plotStepByStep(I_spiral_rec, M, 3, 20, K_100);


    %% Figure 3: Showing the directional lines on the images
    function [] = plotDirectionality(I, mask, patch_size)
        
        % Run regular diffusion to obtain an estimate
        cd('diffusion_diamond');
        I_est = inPainting(I, mask);
        
        % Compute image patch directionality
        cd('../diffusion_directional');
        directions = blockproc(I_est, [patch_size patch_size], ...
            @(P) computeDirectionality(P), ...
            'BorderSize', [1 1], ...
            'PadMethod', 'replicate', ...
            'TrimBorder', false);
        
        % Plot the patches as white lines
        figure;
        imshow(I_est);
        hold on;
        for x = 1:patch_size:size(I_est,1)
            for y = 1:patch_size:size(I_est,2)
                i = 1 + (x - 1) / patch_size;
                j = 1 + (y - 1) / patch_size;
                line = eye(patch_size); line = imfilter(line, [1 1 1; 1 1 1; 1 1 1]);
                line = imrotate(line, directions(i,j) + 45, 'bicubic', 'crop');
                h = imagesc([y y+patch_size], [x x+patch_size], line);
                set(h, 'AlphaData', 0.2);
            end
        end
        hold off;
        cd('../');
        
    end

    I_spiral_rec = I_spiral .* M;
    I_claudia_rec = I_claudia .* M;
    I_tom_rec = I_tom .* M;
    
    plotDirectionality(I_spiral_rec, M, 32);
    plotDirectionality(I_claudia_rec, M, 32);
    plotDirectionality(I_tom_rec, M, 32);

end


